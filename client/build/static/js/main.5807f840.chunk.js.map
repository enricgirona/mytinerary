{"version":3,"sources":["components/citylist.js","components/filter.js","store/actions/pageActions.js","screens/Allcities.js","components/activities.js","store/actions/errorActions.js","store/actions/authActions.js","components/getitineraries.js","components/getcities.js","screens/Explore.js","components/footer.js","components/header.js","store/actions/itineraryActions.js","screens/Allitineraries.js","screens/Register.js","screens/Login.js","screens/SingleCity.js","components/logout.js","screens/Profile.js","screens/Favorites.js","screens/Landing.js","App.js","store/actions/cityActions.js","store/actions/activityActions.js","serviceWorker.js","store/reducers/cityReducer.js","store/reducers/itineraryReducer.js","store/reducers/activityReducer.js","store/reducers/errorReducer.js","store/reducers/authReducer.js","store/reducers/pageReducer.js","store/reducers/rootReducer.js","index.js"],"names":["citylist","className","this","props","cities","map","city","to","name","key","_id","React","Component","connect","state","itineraries","filter","getFilter","e","changeHandler","search","target","value","toLowerCase","label","type","onChange","placeholder","autoFocus","getPageName","payload","Cities","setState","filteredCities","startsWith","activities","activity","title","returnErrors","msg","status","id","clearErrors","tokenConfig","getState","token","auth","config","headers","getitineraries","handleClick","itinerary_id","length","document","getElementById","classList","add","closeClick","remove","favorites","userid","user","itinerary","onClick","price","rating","duration","images","image","src","alt","includes","addFavorite","favorite","dispatch","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","axios","post","then","res","data","catch","err","response","getcities","rel","img","country","toUpperCase","Footer","header","currentpage","buttonback","pic","userpic","history","goBack","logged","withRouter","isAuthenticated","fetchAllItineraries","get","Allitineraries","filteredItineraries","Register","email","password","onSubmit","preventDefault","newUser","register","prevProps","error","errors","body","JSON","stringify","Login","login","href","activeCity","match","params","Logout","logout","Profile","username","usermail","Favorites","filtered","find","Landing","App","fetchCities","fetchAllActivities","url_string","window","location","URL","searchParams","localStorage","setItem","replaceState","origin","loadUser","exact","path","component","Explore","AllCities","SingleCity","Boolean","hostname","initialState","cityReducer","action","itineraryReducer","activityReducer","concat","errorReducer","getItem","isLoading","authReducer","removeItem","pageReducer","rootReducer","combineReducers","citiesReducer","itinerariesReducer","activitiesReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5807f840.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nclass citylist extends React.Component {\n  render() {\n    return (\n      <div className=\"list\">\n        {this.props.cities.map(city => (\n          <NavLink to={\"/itineraries/\" + city.name} key={city._id}>\n            <div className=\"list-item\">\n              <p className=\"title\">{city.name}</p>\n            </div>\n          </NavLink>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itineraries\n  };\n};\n\nexport default connect(mapStateToProps, null)(citylist);\n","import React, { Component } from \"react\";\n\nexport default class filter extends Component {\n  getFilter = e => {\n    this.props.changeHandler({ search: e.target.value.toLowerCase() });\n  };\n  render() {\n    return (\n      <div className=\"filter\">\n        <input\n          label=\"search\"\n          type=\"text\"\n          className=\"inputField\"\n          onChange={this.getFilter}\n          placeholder=\"type here to filter...\"\n          autoFocus\n        ></input>\n      </div>\n    );\n  }\n}\n","export const getPageName = payload => {\n  return {\n    type: \"SET_PAGE\",\n    payload\n  };\n};\n","import React from \"react\";\n\nimport CityList from \"../components/citylist\";\n\nimport Filter from \"../components/filter\";\n\nimport { connect } from \"react-redux\";\n\nimport { getPageName } from \"../store/actions/pageActions\";\n\nclass Cities extends React.Component {\n  state = {\n    search: \"\"\n  };\n\n  componentDidMount() {\n    this.props.getPageName(\"Cities\");\n  }\n\n  changeHandler = props => {\n    this.setState(props);\n  };\n\n  render() {\n    const { cities } = this.props.cities;\n    let filteredCities = cities.filter(city => city.name.toLowerCase().startsWith(this.state.search));\n\n    return (\n      <div className=\"main\">\n        <Filter changeHandler={this.changeHandler} />\n        <CityList cities={filteredCities} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities\n  };\n};\n\nexport default connect(mapStateToProps, { getPageName })(Cities);\n","import React, { Component } from \"react\";\n\nexport default class activities extends Component {\n  render() {\n    return (\n      <div className=\"activities\">\n        <p>\n          <strong>Activities:</strong>\n        </p>\n        {this.props.activities.map(activity => (\n          <div key={activity._id} className=\"activity\">\n            <p>- {activity.title}</p>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","export const returnErrors = (msg, status, id = null) => {\n  return {\n    type: \"GET_ERRORS\",\n    payload: { msg, status, id }\n  };\n};\n\nexport const clearErrors = () => {\n  return {\n    type: \"CLEAR_ERRORS\"\n  };\n};\n","import axios from \"axios\";\n\nimport { returnErrors } from \"./errorActions\";\n\nexport const register = ({ name, email, password }) => dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({ name, email, password });\n\n  axios\n    .post(\"/user\", body, config)\n    .then(res =>\n      dispatch({\n        type: \"REGISTER_SUCCESS\",\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n      dispatch({\n        type: \"REGISTER_FAIL\"\n      });\n    });\n};\n\nexport const login = ({ email, password }) => dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({ email, password });\n  axios\n    .post(\"/auth\", body, config)\n    .then(res =>\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n      dispatch({\n        type: \"LOGIN_FAIL\"\n      });\n    });\n};\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({ type: \"USER_LOADING\" });\n  axios\n    .get(\"/auth/user\", tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: \"USER_LOADED\",\n        payload: res.data\n      })\n    )\n\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: \"AUTH_ERROR\"\n      });\n    });\n};\n\nexport const addFavorite = (_id, favorite) => (dispatch, getState) => {\n  let details = {\n    _id: _id,\n    favorite: favorite\n  };\n\n  let formBody = [];\n  for (let property in details) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  formBody = formBody.join(\"&\");\n\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"x-auth-token\": token\n    }\n  };\n  axios\n    .post(\"/favorites/post\", formBody, config)\n    .then(res =>\n      dispatch({\n        type: \"FAVORITE_ADDED\",\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, \"FAVORITE_ERROR\"));\n      dispatch({\n        type: \"FAVORITE_ERROR\"\n      });\n    });\n};\n\n//! Setup config/headers and token\nexport const tokenConfig = getState => {\n  //* Get token from localStorage\n  const token = getState().auth.token;\n  //* Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  //* If token, add to headers\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n  return config;\n};\n\nexport const logout = () => {\n  return {\n    type: \"LOGOUT_SUCCESS\"\n  };\n};\n","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport Activities from \"../components/activities\";\n\nimport { addFavorite } from \"../store/actions/authActions\";\n\nclass getitineraries extends Component {\n  handleClick = id => {\n    if (this.props.activities.activities.filter(activity => activity.itinerary_id === id).length === 0) {\n    }\n    document.getElementById(id).classList.add(\"open\");\n  };\n  closeClick = id => {\n    document.getElementById(id).classList.remove(\"open\");\n  };\n\n  render() {\n    const { activities } = this.props.activities;\n    let favorites;\n    let userid;\n    if (this.props.user) {\n      favorites = this.props.user.favorites;\n      userid = this.props.user._id;\n    } else {\n      favorites = [];\n    }\n    return (\n      <div className=\"list\">\n        {this.props.itineraries.map(itinerary => (\n          <div key={itinerary._id} id={itinerary._id}>\n            <div key={itinerary._id} className=\"list-item\">\n              <div className=\"itinerary-title\" onClick={() => this.handleClick(itinerary._id)}>\n                <p className=\"title\">{itinerary.title}</p>\n                <p className=\"price\">{itinerary.price}</p>\n              </div>\n              <div className=\"card-collpase\">\n                <div className=\"itinerary-info-container\">\n                  <p className=\"itinerary-info\">\n                    <strong>Rating:</strong> {itinerary.rating}\n                  </p>\n                  <p className=\"itinerary-info\">\n                    <strong>Duration:</strong> {itinerary.duration}\n                  </p>\n                  <div className=\"close-button\" onClick={() => this.closeClick(itinerary._id)}>\n                    <ion-icon name=\"close\"></ion-icon>\n                  </div>\n                </div>\n\n                {itinerary.images ? (\n                  <div className=\"slider\">\n                    {itinerary.images.map(image => (\n                      <div className=\"slider-img\" key={image}>\n                        <img src={image} alt=\"sliderpic\"></img>\n                      </div>\n                    ))}\n                  </div>\n                ) : null}\n\n                <div className=\"itinerary-info-container\">\n                  <Activities activities={activities.filter(activity => activity.itinerary_id === itinerary._id)} />\n                  {favorites.includes(itinerary._id) ? (\n                    <ion-icon name=\"ios-heart\"></ion-icon>\n                  ) : (\n                    <ion-icon name=\"ios-heart-empty\" onClick={() => this.props.addFavorite(userid, itinerary._id)}></ion-icon>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    activities: state.activities,\n    user: state.auth.user\n  };\n};\n\nexport default connect(mapStateToProps, { addFavorite })(getitineraries);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport GetItineraries from \"../components/getitineraries\";\n\nclass getcities extends React.Component {\n  render() {\n    const { itineraries } = this.props.itineraries;\n    return (\n      <div className=\"inner-cities\">\n        {this.props.cities.map(city => (\n          <div className=\"out-card\" key={city._id}>\n            <div className=\"card\">\n              <div className=\"inner-card\">\n                <img rel=\"preload\" src={city.img} alt={city.name}></img>\n                <p className=\"card-subtitle\">{city.country.toUpperCase()}</p>\n                <p className=\"card-title\">{city.name}</p>\n              </div>\n              <GetItineraries itineraries={itineraries.filter(itinerary => itinerary.city === city.name)} />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itineraries\n  };\n};\n\nexport default connect(mapStateToProps, null)(getcities);\n","import React from \"react\";\n\nimport GetCities from \"../components/getcities\";\n\nimport { connect } from \"react-redux\";\n\nimport { getPageName } from \"../store/actions/pageActions\";\n\nclass Cities extends React.Component {\n  state = {\n    search: \"\"\n  };\n\n  componentDidMount() {\n    this.props.getPageName(\"Explore\");\n  }\n\n  changeHandler = props => {\n    this.setState(props);\n  };\n\n  render() {\n    const { cities } = this.props.cities;\n\n    return (\n      <div className=\"main\">\n        <GetCities cities={cities} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities\n  };\n};\n\nexport default connect(mapStateToProps, { getPageName })(Cities);\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nexport default class Footer extends React.Component {\n  render() {\n    return (\n      <div className=\"nav\">\n        <div className=\"inner-header\">\n          <NavLink to={\"/\"}>\n            <ion-icon name=\"ios-compass\"></ion-icon>\n            <p>Explore</p>\n          </NavLink>\n          <NavLink to={\"/cities\"}>\n            <ion-icon name=\"ios-pin\"></ion-icon>\n            <p>Cities</p>\n          </NavLink>\n          <NavLink to={\"/itineraries\"}>\n            <ion-icon name=\"ios-map\"></ion-icon>\n            <p>Itineraries</p>\n          </NavLink>\n          <NavLink to={\"/favorites\"}>\n            <ion-icon name=\"ios-heart\"></ion-icon>\n            <p>Favorites</p>\n          </NavLink>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { withRouter } from \"react-router-dom\";\n\nimport { NavLink } from \"react-router-dom\";\nclass header extends Component {\n  componentDidUpdate() {\n    if (this.props.currentpage === \"Explore\") {\n      var buttonback = document.getElementById(\"goback\");\n      buttonback.className = \"hide-back\";\n    } else {\n      buttonback = document.getElementById(\"goback\");\n      buttonback.className = \"no-hide\";\n    }\n  }\n\n  render() {\n    let pic;\n    if (this.props.user) {\n      if (this.props.user.image) {\n        var userpic = this.props.user.image;\n        pic = (\n          <div className=\"toggle\">\n            <img className=\"small-profile-pic\" alt=\"profile-pic\" src={userpic}></img>\n          </div>\n        );\n      } else {\n        pic = (\n          <div>\n            <ion-icon name=\"ios-contact\" />\n          </div>\n        );\n      }\n    } else {\n      pic = (\n        <div>\n          <ion-icon name=\"ios-contact\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"header\">\n        <div className=\"inner-header\">\n          <NavLink id=\"goback\" to={\"#\"} onClick={() => this.props.history.goBack()}>\n            <div className=\"user-profile-pic\">\n              <ion-icon name=\"ios-arrow-back\"></ion-icon>\n            </div>\n          </NavLink>\n          <p className=\"page-title\">{this.props.currentpage}</p>\n          <NavLink to={this.props.logged ? \"/profile\" : \"/login\"}>{pic}</NavLink>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentpage: state.currentpage.currentpage,\n    user: state.auth.user,\n    logged: state.auth.isAuthenticated\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, null)(header));\n","import axios from \"axios\";\n\nexport const fetchItineraries = activeCity => dispatch => {\n  axios.get(\"/itineraries/\" + activeCity).then(res => {\n    dispatch({\n      type: \"GET_ITINERARIES\",\n      payload: res.data\n    });\n  });\n};\n\nexport const fetchAllItineraries = () => dispatch => {\n  axios.get(\"/itineraries/all\").then(res => {\n    dispatch({\n      type: \"GET_ITINERARIES\",\n      payload: res.data\n    });\n  });\n};\n","import React from \"react\";\n\nimport GetItineraries from \"../components/getitineraries\";\n\nimport Filter from \"../components/filter\";\n\nimport { connect } from \"react-redux\";\n\nimport { fetchAllItineraries } from \"../store/actions/itineraryActions\";\n\nimport { getPageName } from \"../store/actions/pageActions\";\n\nclass Allitineraries extends React.Component {\n  state = {\n    search: \"\"\n  };\n\n  componentDidMount() {\n    this.props.fetchAllItineraries();\n    this.props.getPageName(\"Itineraries\");\n  }\n\n  changeHandler = props => {\n    this.setState(props);\n  };\n\n  render() {\n    const { itineraries } = this.props.itineraries;\n    let filteredItineraries = itineraries.filter(itinerary => itinerary.title.toLowerCase().includes(this.state.search));\n    return (\n      <div className=\"main\">\n        <Filter changeHandler={this.changeHandler} />\n        <GetItineraries itineraries={filteredItineraries} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itineraries\n  };\n};\n\nexport default connect(mapStateToProps, { getPageName, fetchAllItineraries })(Allitineraries);\n","import { connect } from \"react-redux\";\n\nimport React, { Component } from \"react\";\n\nimport { register } from \"../store/actions/authActions\";\n\nimport { clearErrors } from \"../store/actions/errorActions\";\n\nimport { getPageName } from \"../store/actions/pageActions\";\n\nclass Register extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    msg: null\n  };\n\n  componentDidMount() {\n    this.props.getPageName(\"New Account\");\n  }\n\n  componentDidUpdate(prevProps) {\n    const { error } = this.props;\n    if (error !== prevProps.error) {\n      if (error.id === \"REGISTER_FAIL\") {\n        this.setState({ msg: error.msg.msg });\n      } else {\n        this.setState({ msg: null });\n      }\n    }\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onSubmit = e => {\n    this.props.clearErrors();\n    e.preventDefault();\n\n    const { name, email, password } = this.state;\n\n    const newUser = {\n      name,\n      email,\n      password\n    };\n\n    this.props.register(newUser);\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"inner\">\n          {this.state.msg ? <p>{this.state.msg}</p> : null}\n          <form className=\"form\" onSubmit={this.onSubmit}>\n            <label>Name</label>\n            <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name\" onChange={this.onChange} />\n            <label>Email</label>\n            <input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" onChange={this.onChange} />\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" onChange={this.onChange} />\n\n            <button className=\"button1\">Sign Up</button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  error: state.errors\n});\n\nexport default connect(mapStateToProps, { register, clearErrors, getPageName })(Register);\n","import { connect } from \"react-redux\";\n\nimport React, { Component } from \"react\";\n\nimport { login } from \"../store/actions/authActions\";\n\nimport { clearErrors } from \"../store/actions/errorActions\";\n\nimport { getPageName } from \"../store/actions/pageActions\";\n\nimport { NavLink } from \"react-router-dom\";\n\nclass Login extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    msg: \"\"\n  };\n\n  componentDidMount() {\n    this.props.getPageName(\"Login\");\n  }\n\n  componentDidUpdate(prevProps) {\n    const { error } = this.props;\n    if (error !== prevProps.error) {\n      if (error.id === \"LOGIN_FAIL\") {\n        this.setState({ msg: error.msg.msg });\n      } else {\n        this.setState({ msg: null });\n      }\n    }\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    const { email, password } = this.state;\n\n    const user = {\n      email,\n      password\n    };\n\n    this.props.login(user);\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"inner\">\n          {this.state.msg ? <p>{this.state.msg}</p> : null}\n          <form className=\"form\" onSubmit={this.onSubmit}>\n            <label>Email</label>\n            <input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" onChange={this.onChange} />\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" onChange={this.onChange} />\n            <button className=\"button1\">Login</button>\n\n            <button className=\"button1\">\n              <a href=\"http://localhost:5000/auth/google\">Login with Google</a>\n            </button>\n          </form>\n\n          <div className=\"button-container\">\n            <NavLink to=\"/register\">\n              <button className=\"button1\">\n                <div href=\"#\">Create New Account</div>\n              </button>\n            </NavLink>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  error: state.errors\n});\n\nexport default connect(mapStateToProps, { getPageName, login, clearErrors })(Login);\n","import React from \"react\";\n\nimport GetCities from \"../components/getcities\";\n\nimport { connect } from \"react-redux\";\n\nimport { getPageName } from \"../store/actions/pageActions\";\n\nclass Cities extends React.Component {\n  state = {\n    activeCity: \"\"\n  };\n\n  componentDidMount() {\n    const {\n      match: { params }\n    } = this.props;\n    let activeCity = params.name;\n    this.setState({ activeCity: activeCity });\n    this.props.getPageName(\"Itineraries in \" + activeCity);\n  }\n\n  changeHandler = props => {\n    this.setState(props);\n  };\n\n  render() {\n    const { cities } = this.props.cities;\n    return (\n      <div className=\"main no-x-scroll\">\n        <GetCities cities={cities.filter(city => city.name.toLowerCase().match(this.state.activeCity.toLowerCase()))} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities\n  };\n};\n\nexport default connect(mapStateToProps, { getPageName })(Cities);\n","import React, { Component } from \"react\";\n\nimport { NavLink } from \"react-router-dom\";\n\nimport { logout } from \"../store/actions/authActions\";\n\nimport { connect } from \"react-redux\";\n\nclass Logout extends Component {\n  render() {\n    return (\n      <NavLink to=\"/\">\n        <button className=\"button1\" onClick={this.props.logout} href=\"#\">\n          Logout\n        </button>\n      </NavLink>\n    );\n  }\n}\n\nexport default connect(null, { logout })(Logout);\n","import React, { Component } from \"react\";\n\nimport { getPageName } from \"../store/actions/pageActions\";\n\nimport { connect } from \"react-redux\";\n\nimport Logout from \"../components/logout.js\";\n\nclass Profile extends Component {\n  componentDidMount() {\n    this.props.getPageName(\"Profile\");\n  }\n  render() {\n    if (this.props.user) {\n      var username = this.props.user.name;\n      var usermail = this.props.user.email;\n      var userpic = this.props.user.image || \"https://pbs.twimg.com/profile_images/716487122224439296/HWPluyjs.jpg\";\n    }\n    return (\n      <div className=\"main-container\">\n        <div className=\"profile\">\n          <img rel=\"preload\" className=\"profile-pic\" src={userpic} alt=\"profile-pic\"></img>\n          <p>{username}</p>\n          <p>{usermail}</p>\n        </div>\n        <Logout />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.auth.user\n  };\n};\n\nexport default connect(mapStateToProps, { getPageName })(Profile);\n","import React from \"react\";\n\nimport GetItineraries from \"../components/getitineraries\";\n\nimport { connect } from \"react-redux\";\n\nimport { getPageName } from \"../store/actions/pageActions\";\n\nclass Favorites extends React.Component {\n  componentDidMount() {\n    this.props.getPageName(\"Favorites\");\n  }\n\n  render() {\n    let favorites;\n    if (this.props.user) {\n      favorites = this.props.user.favorites;\n    } else {\n      favorites = [];\n    }\n\n    const { itineraries } = this.props.itineraries;\n    const filtered = itineraries.filter(function(itinerary) {\n      return favorites.find(favorite => favorite === itinerary._id);\n    });\n\n    return (\n      <div className=\"main\">\n        {favorites[0] ? (\n          <GetItineraries itineraries={filtered} />\n        ) : (\n          <div className=\"list\">\n            <div className=\"list-item\">\n              <p className=\"title\">No favorites to display.</p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itineraries,\n    user: state.auth.user\n  };\n};\n\nexport default connect(mapStateToProps, { getPageName })(Favorites);\n","import React from \"react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"main-container\">\n      <div className=\"title-logo\">\n        <p className=\"title\">\n          my<b>tinerary</b>\n        </p>\n      </div>\n      <p>Find your perfect trip, designed by insiders who know and love their cities.</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport AllCities from \"./screens/Allcities.js\";\nimport Explore from \"./screens/Explore.js\";\nimport Footer from \"./components/footer\";\nimport Header from \"./components/header\";\nimport Allitineraries from \"./screens/Allitineraries.js\";\nimport { loadUser } from \"./store/actions/authActions.js\";\nimport { connect } from \"react-redux\";\nimport Register from \"./screens/Register\";\nimport Login from \"./screens/Login\";\nimport SingleCity from \"./screens/SingleCity\";\nimport { fetchCities } from \"../src/store/actions/cityActions\";\nimport { fetchAllItineraries } from \"../src/store/actions/itineraryActions\";\nimport { fetchAllActivities } from \"../src/store/actions/activityActions\";\nimport Profile from \"../src/screens/Profile\";\nimport Favorites from \"../src/screens/Favorites\";\nimport Landing from \"../src/screens/Landing\";\n//import Loader from \"../src/components/loader\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.fetchCities();\n    this.props.fetchAllItineraries();\n    this.props.fetchAllActivities();\n    var url_string = window.location.href;\n    var url = new URL(url_string);\n    var token = url.searchParams.get(\"token\");\n    if (token) {\n      localStorage.setItem(\"token\", token);\n      window.history.replaceState(null, null, `${window.location.origin}`);\n    }\n    this.props.loadUser();\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Explore} />\n            <Route exact path=\"/cities\" component={AllCities} />\n            <Route path=\"/itineraries/:name\" component={SingleCity} />\n            <Route exact path=\"/itineraries/\" component={Allitineraries} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/favorites\" component={Favorites} />\n            <Route exact path=\"/landing\" component={Landing} />\n          </Switch>\n          <Footer />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itineraries,\n    cities: state.cities\n  };\n};\n\nexport default connect(mapStateToProps, { fetchCities, fetchAllItineraries, fetchAllActivities, loadUser })(App);\n\n//{this.props.itineraries && this.props.cities ? null : <Loader />}\n","import axios from \"axios\";\n\nexport const fetchCities = () => dispatch => {\n  axios.get(\"/cities/all\").then(res => {\n    dispatch({\n      type: \"GET_CITIES\",\n      payload: res.data\n    });\n  });\n};\n","import axios from \"axios\";\n\nexport const fetchActivities = itineraryID => dispatch => {\n  axios.get(\"/activities/\" + itineraryID).then(res => {\n    dispatch({\n      type: \"GET_ACTIVITIES\",\n      payload: res.data\n    });\n  });\n};\n\nexport const fetchAllActivities = () => dispatch => {\n  axios.get(\"/activities/all\").then(res => {\n    dispatch({\n      type: \"GET_ALL_ACTIVITIES\",\n      payload: res.data\n    });\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  cities: []\n};\n\nconst cityReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_CITIES\":\n      return {\n        ...state,\n        cities: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cityReducer;\n","const initialState = {\n  itineraries: []\n};\n\nconst itineraryReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_ITINERARIES\":\n      return {\n        ...state,\n        itineraries: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default itineraryReducer;\n","const initialState = {\n  activities: []\n};\n\nconst activityReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_ACTIVITIES\":\n      return {\n        ...state,\n        activities: state.activities.concat(action.payload)\n      };\n    case \"GET_ALL_ACTIVITIES\":\n      return {\n        ...state,\n        activities: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default activityReducer;\n","const initialState = {\n  msg: {},\n  status: null,\n  id: null\n};\n\nconst errorReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_ERRORS\":\n      return {\n        ...state,\n        msg: action.payload.msg,\n        status: action.payload.status,\n        id: action.payload.id\n      };\n    case \"CLEAR_ERRORS\":\n      return {\n        ...state,\n        msg: {},\n        status: null,\n        id: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default errorReducer;\n","const initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  isLoading: false,\n  user: null\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"USER_LOADING\":\n      return {\n        token: localStorage.getItem(\"token\"),\n        isLoading: true\n      };\n    case \"USER_LOADED\":\n      return {\n        ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload\n      };\n    case \"LOGIN_SUCCESS\":\n    case \"REGISTER_SUCCESS\":\n      localStorage.setItem(\"token\", action.payload.token);\n      return {\n        ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        isLoading: false\n      };\n    case \"AUTH_ERROR\":\n    case \"LOGIN_FAIL\":\n    case \"LOGOUT_SUCCESS\":\n    case \"REGISTER_FAIL\":\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n    case \"FAVORITE_ADDED\":\n      return {\n        ...state,\n        favorites: action.payload.favorites\n      };\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n","const initialState = {\n  currentpage: \"\"\n};\n\nconst pageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET_PAGE\":\n      return {\n        ...state,\n        currentpage: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default pageReducer;\n","import { combineReducers } from \"redux\";\nimport citiesReducer from \"./cityReducer\";\nimport itinerariesReducer from \"./itineraryReducer\";\nimport activitiesReducer from \"./activityReducer\";\nimport errorReducer from \"./errorReducer\";\nimport authReducer from \"./authReducer\";\nimport pageReducer from \"./pageReducer\";\n\nconst rootReducer = combineReducers({\n  cities: citiesReducer,\n  itineraries: itinerariesReducer,\n  activities: activitiesReducer,\n  errors: errorReducer,\n  auth: authReducer,\n  currentpage: pageReducer\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./store/reducers/rootReducer\";\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}